# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LwmQ8WxicdvfxZqsmuSrIQIfbP8uDeVG
"""





!pip install streamlit
import streamlit as st
import pandas as pd
import joblib
import shap
from sklearn.preprocessing import LabelEncoder, StandardScaler

# ... (Load encoders, scaler, and model as before)

# Assuming your features are: 'Crop Type', 'State', 'Month', 'Year', 'futureYear', 'Season'
# Adjust based on your actual model features
feature_columns = ['Crop Type', 'State', 'Month', 'Year', 'futureYear', 'Season']

# Initialize an empty DataFrame for X
X = pd.DataFrame(columns=feature_columns)

st.title("üåæ Crop Price Category Prediction App")
st.markdown("Predict crop price class (Low, Medium, High) and understand feature impact with SHAP.")

# User input
user_input = {}
for col in feature_columns:
    # Indent the code within the loop:
    user_input[col] = st.text_input(f"Enter {col}")

# Predict and Explain
if st.button("Predict Price Category"):
    input_df = pd.DataFrame([user_input])

    st.write("Input DataFrame before scaling:")  # Debug: Show input
    st.dataframe(input_df)

    # Preprocess the data using encoders (if needed) before scaling
    for column in categorical_cols:  # Assuming categorical_cols is defined
        if column in input_df.columns:
            input_df[column] = encoders[column].transform(input_df[column])

    input_scaled = scaler.transform(input_df)

    st.write("Input DataFrame after scaling:")  # Debug: Show scaled input
    st.dataframe(input_scaled)

    st.write("Input DataFrame columns:")
    st.write(input_df.columns)

    # Prediction
    try:
        prediction = model.predict(input_scaled)[0]
        st.success(f"Predicted Price Category: **{prediction}**")
    except Exception as e:
        st.error(f"Error during prediction: {e}")
        st.stop()  # Stop execution if prediction fails

    # SHAP Explanation
    try:
        # Make sure explainer is defined before using it
        # Example: explainer = shap.TreeExplainer(model)
        shap_values = explainer(input_scaled)
        st.subheader("üîç Feature Impact (SHAP)")
        shap.plots.waterfall(shap_values[0], max_display=10)
        st.pyplot(bbox_inches='tight')
    except Exception as e:
        st.error(f"Error during SHAP explanation: {e}")



